// <auto-generated />
using System;
using IconicFund.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IconicFund.Context.Migrations
{
    [DbContext(typeof(IconicFundDbContext))]
    [Migration("20210215214059_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IconicFund.Models.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActivationEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActivationStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CanApprove")
                        .HasColumnType("bit");

                    b.Property<string>("DefaultLetterStatement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmplyeeNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fingerprint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManager")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfileImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignatureImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("SignatureImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ThirdName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("IconicFund.Models.Entities.AdminRole", b =>
                {
                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AdminId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AdminRoles");
                });

            modelBuilder.Entity("IconicFund.Models.Entities.BasicSystemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExportPrefixType")
                        .HasColumnType("int");

                    b.Property<int?>("ExportSerialNumberDigitsCount")
                        .HasColumnType("int");

                    b.Property<string>("ExportSerialNumberPostfix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExportSerialNumberPrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExportSerialNumberStartValue")
                        .HasColumnType("int");

                    b.Property<string>("Footer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupPermissionCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IncomingPrefixType")
                        .HasColumnType("int");

                    b.Property<int?>("IncomingSerialNumberDigitsCount")
                        .HasColumnType("int");

                    b.Property<string>("IncomingSerialNumberPostfix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomingSerialNumberPrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IncomingSerialNumberStartValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsAllowToUserToLoginManyTime")
                        .HasColumnType("bit");

                    b.Property<int>("ManyWrongLoginAvailability")
                        .HasColumnType("int");

                    b.Property<int?>("MaxFileSize")
                        .HasColumnType("int");

                    b.Property<int>("MinPassword")
                        .HasColumnType("int");

                    b.Property<int>("PasswordComplexityId_Fk")
                        .HasColumnType("int");

                    b.Property<int>("PasswordExpiredAfter")
                        .HasColumnType("int");

                    b.Property<double>("SessionTime")
                        .HasColumnType("float");

                    b.Property<string>("SystemLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemTitle_Ar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemTitle_En")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupPermissionCode");

                    b.HasIndex("PasswordComplexityId_Fk");

                    b.ToTable("BasicSystemSetting");
                });

            modelBuilder.Entity("IconicFund.Models.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("IconicFund.Models.Entities.Lkp_PasswordComplexity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComplexityName_Ar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComplexityName_En")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lkp_PasswordComplexity");
                });

            modelBuilder.Entity("IconicFund.Models.Entities.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("IconicFund.Models.Entities.PermissionGroup", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionsList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ViewSecretTransactions")
                        .HasColumnType("bit");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Code");

                    b.ToTable("PermissionGroups");
                });

            modelBuilder.Entity("IconicFund.Models.Entities.PermissionGroupAdmin", b =>
                {
                    b.Property<string>("PermissionGroupCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PermissionGroupCode", "AdminId");

                    b.HasIndex("AdminId");

                    b.ToTable("PermissionGroupAdmins");
                });

            modelBuilder.Entity("IconicFund.Models.Entities.Permissions", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("IconicFund.Models.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("IconicFund.Models.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("IconicFund.Models.Entities.SystemLogging", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoggingAction")
                        .HasColumnType("int");

                    b.Property<int>("LoggingCategory")
                        .HasColumnType("int");

                    b.Property<string>("NewData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RowID")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("SystemLogging");
                });

            modelBuilder.Entity("IconicFund.Models.Entities.AdminRole", b =>
                {
                    b.HasOne("IconicFund.Models.Entities.Admin", "Admin")
                        .WithMany("Roles")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IconicFund.Models.Entities.Role", "Role")
                        .WithMany("Admins")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IconicFund.Models.Entities.BasicSystemSetting", b =>
                {
                    b.HasOne("IconicFund.Models.Entities.PermissionGroup", "PermissionGroup")
                        .WithMany()
                        .HasForeignKey("GroupPermissionCode");

                    b.HasOne("IconicFund.Models.Entities.Lkp_PasswordComplexity", "Lkp_PasswordComplexity")
                        .WithMany("BasicSystemSetting")
                        .HasForeignKey("PasswordComplexityId_Fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IconicFund.Models.Entities.PermissionGroupAdmin", b =>
                {
                    b.HasOne("IconicFund.Models.Entities.Admin", "Admin")
                        .WithMany("PermissionGroups")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IconicFund.Models.Entities.PermissionGroup", "PermissionGroup")
                        .WithMany("Admins")
                        .HasForeignKey("PermissionGroupCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IconicFund.Models.Entities.Region", b =>
                {
                    b.HasOne("IconicFund.Models.Entities.City", "City")
                        .WithMany("Regions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("IconicFund.Models.Entities.SystemLogging", b =>
                {
                    b.HasOne("IconicFund.Models.Entities.Admin", "UserData")
                        .WithMany("LoggingData")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
